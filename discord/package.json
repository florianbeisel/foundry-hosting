{
  "name": "foundry-discord-bot",
  "version": "1.0.0",
  "description": "Interactive Discord bot for managing Foundry VTT instances",
  "main": "src/boot/index.js",
  "scripts": {
    "start": "node src/boot/index.js",
    "dev": "nodemon src/boot/index.js",
    "deploy-commands": "node deploy-commands.js",
    "docker:build": "docker build -t foundry-vtt-discord-bot .",
    "docker:tag": "docker tag foundry-vtt-discord-bot:latest $ECR_REPO_URL:latest",
    "docker:login": "aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY",
    "docker:push": "docker push $ECR_REPO_URL:latest",
    "docker:deploy": "npm run docker:build && npm run docker:tag && npm run docker:login && npm run docker:push",
    "pulumi:get-ecr": "pulumi stack output discordBotOutputs --json | jq -r '.ecrRepository.url'",
    "deploy": "ECR_REPO_URL=$(npm run pulumi:get-ecr --silent) && ECR_REGISTRY=$(echo $ECR_REPO_URL | cut -d'/' -f1) && AWS_REGION=${AWS_REGION:-eu-central-1} && export ECR_REPO_URL ECR_REGISTRY AWS_REGION && npm run docker:deploy",
    "deploy:script": "./deploy.sh",
    "update-service": "aws ecs update-service --cluster ${ECS_CLUSTER_NAME:-foundry-vtt-cluster} --service ${ECS_SERVICE_NAME:-foundry-vtt-discord-bot} --force-new-deployment"
  },
  "dependencies": {
    "@aws-sdk/client-dynamodb": "^3.848.0",
    "@aws-sdk/client-lambda": "^3.848.0",
    "@aws-sdk/lib-dynamodb": "^3.848.0",
    "discord.js": "^14.21.0",
    "dotenv": "^17.2.0",
    "node-cron": "^3.0.3"
  },
  "devDependencies": {
    "nodemon": "^3.1.10"
  }
}
